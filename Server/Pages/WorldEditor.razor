@page "/worldeditor"
@inherits ComponentBase
@using Hedron.Core.Locale;
@using Hedron.Data;
@using Hedron.Core.Entities.Properties;
@using Hedron.Core.System;
@using Server.Shared.Filters;
@using Server.Shared.Lists;

    <div>
        <form>
            <div class="form-group row">
                <WorldFilter OnWorldFilterChanged="@WorldFilterChanged" Worlds="@Worlds" SelectedWorld="@_currentWorld?.Prototype" />
                <div class="col-xl-1">
                    <!-- empty -->
                </div>
                <div class="col-xl-2 pl-0">
                    @if (_currentWorld != null)
                    {
                        <button @onclick="NewWorld" class="btn btn-primary col-form-label mr-3 text-center" style="width: 75px">New</button>
                    }
                    @if (_currentWorld != null)
                    {
                        <button @onclick="DeleteWorld" class="btn btn-danger col-form-label text-center" style="width: 75px">Delete</button>
                    }
                </div>
            </div>
        </form>

        <form>
            <div class="form-group row">
                <label for="worldName" class="col-xl-1 col-form-label">Name</label>
                @if (_currentWorld != null)
                {
                    <input id="worldName" class="col-xl-2 col-form-label" @bind="_currentWorld.Name" />
                    DataPersistence.SaveObject(_currentWorld);
                }
                else
                {
                    <input id="worldName" class="col-xl-2 col-form-label" disabled />
                }
                <label for="worldProtoype" class="col-xl-1 col-form-label">Prototype</label>
                @if (_currentWorld != null)
                {
                    <input id="worldPrototype" class="col-xl-2 col-form-label" @bind="_currentWorld.Prototype" disabled />
                }
                else
                {
                    <input id="areaName" class="col-xl-2 col-form-label" disabled />
                }
            </div>
        </form>

        @if (_currentWorld != null)
        {
            <form>
                <div class="form-group row">
                    <RoomFilter OnRoomFilterChanged="@RoomFilterChanged" SelectedRoom="@_selectedRoom" Rooms="@Rooms" FilterLabel="Start"/>
                </div>
            </form>
        }
    </div>

@if (_currentWorld != null)
{
    <div class="row mt-5 pt-xl-5 pr-xl-5 pl-xl-3">
        <AreaList Areas="@Areas" />
    </div>
    <div class="row mt-5 pt-xl-5 pr-xl-5 pl-xl-3">

    </div>
}


@code {
    private uint? _selectedWorld;
    private World _currentWorld;

    private uint? _selectedRoom;

    public List<World> Worlds { get; set; }
    public List<Area> Areas { get; set; }
    public List<Room> Rooms { get; set; }

    protected override void OnInitialized()
    {
        Worlds = DataAccess.GetAll<World>(CacheType.Prototype);
        Rooms = new List<Room>();
        Console.WriteLine("WorldEditor:OnInitialized");
        RefreshWorlds();
    }

    protected void WorldFilterChanged(uint? worldID)
    {
        _selectedWorld = worldID;
        _currentWorld = DataAccess.Get<World>(_selectedWorld, CacheType.Prototype);
        _selectedRoom = _currentWorld.StartingLocation;
        RefreshAreas();
        RefreshRooms();
    }

    private void RefreshWorlds()
    {
        Areas = DataAccess.GetAll<Area>(CacheType.Prototype);
    }

    private void RefreshAreas()
    {
        if (_selectedWorld != null)
            Areas = DataAccess.Get<World>(_selectedWorld, CacheType.Prototype).Areas.GetAllEntitiesAsObjects<Area>();
        else
            Areas = new List<Area>();
    }

    private void RefreshRooms()
    {
        if (_currentWorld != null)
        {
            foreach (var area in Areas)
            {
                Rooms.AddRange(area.Rooms.GetAllEntitiesAsObjects<Room>());
            }
        }
        else
            Areas = new List<Area>();
    }

    private void NewWorld()
    {

    }

    private void DeleteWorld()
    {

    }

    protected void RoomFilterChanged(uint? roomID)
    {
        _selectedRoom = roomID;
        _currentWorld.StartingLocation = roomID;
        DataPersistence.SaveObject(_currentWorld);
    }

}
