@page "/areaeditor"
@inherits ComponentBase
@using Hedron.Core.Locale;
@using Hedron.Data;
@using Hedron.Core.System;
@using Server.Shared.Filters;
@using Server.Shared.Lists;
@inject LocaleEditorState EditorState;

<div>
    <form>
        <div class="form-group row">
            <WorldFilter OnWorldFilterChanged="@WorldFilterChanged" Worlds="@Worlds" />
            <AreaFilter OnAreaFilterChanged="@AreaFilterChanged" Areas="@Areas" />
            <div class="col-xl-1">
                <!-- empty -->
            </div>
            <div class="col-xl-2 pl-0">
                @if (EditorState.CurrentWorld != null)
                {
                    <button @onclick="NewArea" class="btn btn-primary col-form-label mr-3 text-center" style="width: 75px">New</button>
                }
                @if (EditorState.CurrentArea != null)
                {
                    <button @onclick="DeleteArea" class="btn btn-danger col-form-label text-center" style="width: 75px">Delete</button>
                }
            </div>
        </div>
    </form>

    <form>
        <div class="form-group row">
            <label for="areaName" class="col-xl-1 col-form-label">Name</label>
            @if (EditorState.CurrentArea != null)
            {
                <input id="areaName" class="col-xl-2 col-form-label" @bind="EditorState.CurrentArea.Name" />
                DataPersistence.SaveObject(EditorState.CurrentArea);
            }
            else
            {
                <input id="areaName" class="col-xl-2 col-form-label" disabled />
            }
            <label for="areaTier" class="col-xl-1 col-form-label">Tier</label>
            @if (EditorState.CurrentArea != null)
            {
                <select id="areaTier" class="col-xl-2 col-form-label" @bind="EditorState.CurrentArea.Tier.Level">
                    @for (var i = Constants.MIN_TIER; i <= Constants.MAX_TIER; i++)
                    {
                        <option value="@i">@i</option>
                    }
                </select>
                DataPersistence.SaveObject(EditorState.CurrentArea);
            }
            else
            {
                <select id="areaTier" class="col-xl-2 col-form-label" disabled>
                </select>
            }
            <label for="areaPrototype" class="col-xl-1 col-form-label">Prototype</label>
            @if (EditorState.CurrentArea != null)
            {
                <input id="areaPrototype" class="col-xl-2 col-form-label" @bind="EditorState.CurrentArea.Prototype" disabled />
            }
            else
            {
                <input id="areaName" class="col-xl-2 col-form-label" disabled />
            }
        </div>
    </form>
</div>

@if (EditorState.SelectedArea != null)
{
    <div class="row mt-5 pt-xl-5 pr-xl-5 pl-xl-3">
        <RoomList Rooms="@Rooms" />
    </div>
    <div class="row mt-5 pt-xl-5 pr-xl-5 pl-xl-3">

    </div>
}


@code {
    public List<World> Worlds { get; set; }
    public List<Area> Areas { get; set; }
    public List<Room> Rooms { get; set; }

    protected override void OnInitialized()
    {
        Worlds = DataAccess.GetAll<World>(CacheType.Prototype);
        Console.WriteLine("AreaEditor:OnInitialized");
        RefreshAreas();
        RefreshRooms();
    }

    protected void WorldFilterChanged(uint? worldID)
    {
        EditorState.SelectedWorld = worldID;
        EditorState.CurrentWorld = DataAccess.Get<World>(EditorState.SelectedWorld, CacheType.Prototype);
        if (EditorState.CurrentWorld == null)
        {
            EditorState.SelectedArea = null;
            EditorState.CurrentArea = null;
        }
        RefreshAreas();
        RefreshRooms();
    }

    protected void AreaFilterChanged(uint? areaID)
    {
        EditorState.SelectedArea = areaID;
        EditorState.CurrentArea = DataAccess.Get<Area>(EditorState.SelectedArea, CacheType.Prototype);
        RefreshRooms();
    }

    private void RefreshAreas()
    {
        if (EditorState.SelectedWorld != null)
            Areas = DataAccess.Get<World>(EditorState.SelectedWorld, CacheType.Prototype).Areas.GetAllEntitiesAsObjects<Area>();
        else
            Areas = new List<Area>();
    }

    private void RefreshRooms()
    {
        if (EditorState.SelectedArea != null)
            Rooms = DataAccess.Get<Area>(EditorState.SelectedArea, CacheType.Prototype).Rooms.GetAllEntitiesAsObjects<Room>();
        else
            Rooms = new List<Room>();
    }

    private void NewArea()
    {
        var newArea = Area.NewPrototype((uint)EditorState.SelectedWorld);
        EditorState.SelectedArea = newArea.Prototype;
        EditorState.CurrentArea = newArea;
        RefreshAreas();
        RefreshRooms();
    }

    private void DeleteArea()
    {
        DataAccess.Remove<Area>(EditorState.CurrentArea.Prototype, CacheType.Prototype);
        EditorState.SelectedArea = null;
        EditorState.CurrentArea = null;
        RefreshAreas();
        RefreshRooms();
    }

}
